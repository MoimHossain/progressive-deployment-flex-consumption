trigger: none
#- master

pool:
  vmImage: ubuntu-latest

variables:
 functionAppName: "fx-tx-blue-app"
 
stages:
  - stage: BuildCode
    displayName: 'Build Code (Golang) and Create Artifact'
    jobs:
    - job: Build
      displayName: 'Build Job'
      steps:
      - checkout: self
      
      - task: Bash@3
        displayName: 'Build Go Application'
        inputs:
          targetType: filePath
          filePath: 'scripts/build-code.sh'
          workingDirectory: 'src/transaction-api'
        env:
            GOOS: linux
            GOARCH: amd64
      
      - task: Bash@3
        displayName: 'Prepare Function App Package'
        inputs:
          targetType: 'inline'
          script: |
            echo "Preparing function app package..."
            
            # Create staging directory
            mkdir -p $(Build.ArtifactStagingDirectory)/function-app
            
            # Copy all necessary files to staging directory
            cp -r src/transaction-api/* $(Build.ArtifactStagingDirectory)/function-app/
            
            # Ensure the executable has correct permissions
            chmod +x $(Build.ArtifactStagingDirectory)/function-app/transaction-api
            
            # List contents to verify
            echo "Function app package contents:"
            ls -la $(Build.ArtifactStagingDirectory)/function-app/
            
            echo "Transaction folder contents:"
            ls -la $(Build.ArtifactStagingDirectory)/function-app/transaction/
      
      - task: PublishBuildArtifacts@1
        displayName: 'Publish Function App Artifact'
        inputs:
          pathToPublish: '$(Build.ArtifactStagingDirectory)/function-app'
          artifactName: 'function-app-package'
          publishLocation: 'Container'

  - stage: DeployCode
    displayName: 'Deploy Code to Azure Function App'
    dependsOn: BuildCode
    condition: succeeded()
    jobs:
    - deployment: Deploy
      displayName: 'Deploy to Azure'
      environment: 'Production'
      strategy:
        runOnce:
          deploy:
            steps:
            - checkout: self
            - task: DownloadBuildArtifacts@1
              displayName: 'Download Function App Artifact'
              inputs:
                buildType: 'current'
                downloadType: 'single'
                artifactName: 'function-app-package'
                downloadPath: '$(System.ArtifactsDirectory)'
            
            - task: Bash@3
              displayName: 'Install Azure Functions Core Tools'
              inputs:
                targetType: 'inline'
                script: |
                  echo "Installing Azure Functions Core Tools..."
                  npm install -g azure-functions-core-tools@4 --unsafe-perm true
                  func --version
            
            - task: Bash@3
              displayName: 'Verify Package Contents'
              inputs:
                targetType: 'inline'
                script: |
                  echo "Verifying downloaded package contents..."
                  ls -la $(System.ArtifactsDirectory)/function-app-package/
                  
                  echo "Checking host.json exists:"
                  cat $(System.ArtifactsDirectory)/function-app-package/host.json
                  
                  echo "Checking function.json exists:"
                  cat $(System.ArtifactsDirectory)/function-app-package/transaction/function.json
                  
                  echo "Checking executable exists and permissions:"
                  ls -la $(System.ArtifactsDirectory)/function-app-package/transaction-api
            - bash: 'az login --service-principal -u $(sp_client_id) -p $(sp_client_secret) --tenant $(sp_tenant_id)'
              displayName: 'Azure Login'
            - task: Bash@3
              displayName: 'Deploy Function App'
              inputs:
                targetType: filePath
                filePath: 'scripts/deploy-code.sh'
                workingDirectory: '$(System.ArtifactsDirectory)/function-app-package'

  - stage: CanaryDeployment
    displayName: 'Canary Deployment - Traffic Shift'
    dependsOn: DeployCode
    condition: succeeded()
    jobs:
    - job: CanaryDeploymentTrafficShift
      displayName: '10% Traffic Shift to new version'
      steps:
      - checkout: self
      
      - bash: 'az login --service-principal -u $(sp_client_id) -p $(sp_client_secret) --tenant $(sp_tenant_id)'
        displayName: 'Azure Login'
      
      - task: Bash@3
        displayName: 'Execute Traffic Shift 10% to the new version'
        inputs:
          targetType: filePath
          filePath: 'scripts/traffic-shift.sh'
          arguments: '10'
          workingDirectory: infra
    
  - stage: RingADeployment
    displayName: 'Ring-A Deployment - Traffic Shift'
    dependsOn: CanaryDeployment
    condition: succeeded()
    jobs:
    - job: RingADeploymentTrafficShift
      displayName: '50% Traffic Shift to new version'
      steps:
      - checkout: self
      
      - bash: 'az login --service-principal -u $(sp_client_id) -p $(sp_client_secret) --tenant $(sp_tenant_id)'
        displayName: 'Azure Login'
      
      - task: Bash@3
        displayName: 'Execute Traffic Shift 10% to the new version'
        inputs:
          targetType: filePath
          filePath: 'scripts/traffic-shift.sh'
          arguments: '50'
          workingDirectory: infra